{"version":3,"file":"background.js","mappings":"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","sources":["webpack://ododoc-chrome/./src/background.ts"],"sourcesContent":["// import { sendWebSocketMessage } from \"./components/textCollect/chromeMessage\";\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//   if (message.action === 'sendPageData') {\r\n//     sendWebSocketMessage(message.data);\r\n//   }\r\n// });\r\n\r\nlet socket: WebSocket | null = null;\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.command === \"start\") {\r\n    console.log(\"start 명령 백그라운드에서 받음\")\r\n    // 웹소켓 연결 시작\r\n    if (!socket || socket.readyState === WebSocket.CLOSED) {\r\n        connectWebSocket();\r\n    }\r\n    chrome.tabs.onUpdated.addListener(handleTabUpdate);\r\n  } else if (message.command === \"stop\") {\r\n    console.log(\"stop 명령 백그라운드에서 받음\")\r\n      // 웹소켓 연결 종료\r\n    if (socket) {\r\n        socket.close();\r\n        socket = null;\r\n    }\r\n    chrome.tabs.onUpdated.removeListener(handleTabUpdate);\r\n  }\r\n});\r\n\r\nfunction getAccessToken(): Promise<string | null> {\r\n  return new Promise((resolve, reject) => {\r\n    chrome.storage.local.get(['accessToken'], (result) => {\r\n      console.log(result)\r\n      if (chrome.runtime.lastError) {\r\n        console.error('Failed to retrieve access token:', chrome.runtime.lastError.message);\r\n        resolve(null);\r\n      } else {\r\n        resolve(result.accessToken as string);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function connectWebSocket() {\r\n  try {\r\n    const accessToken = await getAccessToken();\r\n    if (!accessToken) {\r\n      console.error(\"Access token is not available.\");\r\n      return;\r\n    }\r\n\r\n    if (socket !== null && socket.readyState !== WebSocket.CLOSED) {\r\n      return; // 이미 열려있거나 연결 중인 경우 재연결 시도를 방지\r\n    }\r\n\r\n    socket = new WebSocket('ws://localhost:18080/process/ws');\r\n\r\n    socket.onopen = () => {\r\n      console.log(\"WebSocket connection established\");\r\n\r\n      const messageData = {\r\n        sourceApplication: \"Chrome\",\r\n        accessToken: accessToken,\r\n        connectedFileId: 1,\r\n        dataType: \"SIGNAL\",\r\n        content: \"웹 소켓 onopen\",\r\n        timestamp: new Date()\r\n      };\r\n\r\n      const messageJson = JSON.stringify(messageData);\r\n      if (socket) {\r\n        socket.send(messageJson);\r\n      } else {\r\n        console.error(\"WebSocket connection is not established.\");\r\n      }\r\n    };\r\n\r\n    socket.onerror = (error: Event) => {\r\n      console.error(\"WebSocket Error: \", error);\r\n    };\r\n\r\n    socket.onclose = async (e) => {\r\n      console.log(\"WebSocket 연결 끊김. 1초 후 재연결 합니다.\", e);\r\n      setTimeout(function() {\r\n        connectWebSocket();\r\n      }, 1000);\r\n    };\r\n\r\n  } catch (e) {\r\n    console.error(\"WebSocket connection failed: \", e);\r\n  }\r\n}\r\n\r\nasync function handleTabUpdate(tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) {\r\n  const accessToken = await getAccessToken();\r\n  console.log(\"tabId :\", tabId, \" , changeInfo :\", changeInfo, \" , tab : \", tab)\r\n  if (changeInfo.status === 'complete' && tab.url) {\r\n    chrome.scripting.executeScript({\r\n      target: { tabId },\r\n      func: getHtml,\r\n    }, (results) => {\r\n      if (results[0]) {\r\n        const pageHtml = results[0].result;\r\n        console.log(pageHtml)\r\n        let message = '';\r\n\r\n        if (tab.url && tab.url.startsWith('https://www.google.com/search')) {\r\n            const urlParams = new URLSearchParams(new URL(tab.url).search);\r\n            const searchQuery = urlParams.get('q') || 'Unknown Search'; // 검색어 추출\r\n            message = JSON.stringify({\r\n                type: 'search',\r\n                query: searchQuery\r\n            });\r\n        } else {\r\n            message = JSON.stringify({\r\n                type: 'page',\r\n                url: tab.url,\r\n                html: pageHtml\r\n            });\r\n        }\r\n\r\n        const messageData = {\r\n            sourceApplication: \"Chrome\",\r\n            accessToken: accessToken,\r\n            connectedFileId: 1,\r\n            dataType: \"SIGNAL\",\r\n            content: message,\r\n            timestamp: new Date()\r\n        };\r\n        const messageJson = JSON.stringify(messageData); // 객체를 JSON 문자열로 변환\r\n        console.log(\"소켓이 열려있나?\", socket)\r\n\r\n        if (socket) { // socket.current가 null이 아닐 때만 send 호출\r\n          console.log(\"메세지 보냅니다~~\")\r\n          socket.send(messageJson); // JSON 문자열을 보냄\r\n        } else {\r\n          console.error(\"WebSocket connection is not established.\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction getHtml(): string {\r\n  return document.documentElement.outerHTML;\r\n}"],"names":["socket","chrome","runtime","onMessage","addListener","message","sender","sendResponse","command","console","log","readyState","WebSocket","CLOSED","connectWebSocket","tabs","onUpdated","handleTabUpdate","close","removeListener","getAccessToken","Promise","resolve","reject","storage","local","get","result","lastError","error","accessToken","onopen","messageData","sourceApplication","connectedFileId","dataType","content","timestamp","Date","messageJson","JSON","stringify","send","onerror","onclose","e","setTimeout","tabId","changeInfo","tab","status","url","scripting","executeScript","target","func","getHtml","results","pageHtml","startsWith","urlParams","URLSearchParams","URL","search","searchQuery","type","query","html","document","documentElement","outerHTML"],"sourceRoot":""}